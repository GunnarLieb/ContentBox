name: ContentBox Integration - ${{ GITHUB_REF }}

# Only on Development we build snapshots
on:
  push:
    branches:
      - development
      - master

jobs:
  # Tests First baby! We fail, no build :(
  tests:
    name: Tests
    runs-on: ubuntu-20.04
    env:
      DB_USER: root
      DB_PASSWORD: root
    strategy:
      fail-fast: false
      matrix:
        cfengine: [ "lucee@5", "adobe@2016", "adobe@2018" ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Database and Fixtures
        run: |
          sudo /etc/init.d/mysql start
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} -e 'CREATE DATABASE contentbox;'
          mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} < tests/resources/sql/mysql/contentbox.sql

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Setup CommandBox
        uses: elpete/setup-commandbox@v1.0.0

      - name: Setup .env For Runner
        run: |
          touch .env
          printf "DB_HOST=127.0.0.1\n" >> .env
          printf "DB_DATABASE=contentbox\n" >> .env
          printf "DB_DRIVER=MySQL\n" >> .env
          printf "DB_USER=${{ env.DB_USER }}\n" >> .env
          printf "DB_PASSWORD=${{ env.DB_PASSWORD }}\n" >> .env
          printf "DB_CLASS=com.mysql.cj.jdbc.Driver\n" >> .env
          printf "DB_BUNDLEVERSION=8.0.19\n" >> .env
          printf "DB_BUNDLENAME=com.mysql.cj\n" >> .env

      - name: Add Hibernate Logging
        if: "${{ matrix.cfengine != 'lucee@5' }}"
        run: |
          # Log4j Hibernate Debug
          mkdir -p .engines/acf2016/WEB-INF/cfusion/lib/
          mkdir -p .engines/acf2018/WEB-INF/cfusion/lib/
          cp build/resources/log4j.properties .engines/acf2016/WEB-INF/cfusion/lib/
          cp build/resources/log4j.properties .engines/acf2018/WEB-INF/cfusion/lib/

      - name: Install Dependencies
        run: |
          # Site dependencies
          box install
          # ContentBox dependencies
          cd modules/contentbox && box install

      - name: Start Server
        run: |
          box server start serverConfigFile="server-${{ matrix.cfengine }}.json" --debug
          curl http://127.0.0.1:8589

      - name: Run Web App Tests
        run: |
          box package set testbox.runner="http://127.0.0.1:8589/tests/runner.cfm"
          box testbox run --verbose outputFile=tests/results/test-results outputFormats=json,antjunit

      - name: Run API Tests
        run: |
          box package set testbox.runner="http://127.0.0.1:8589/tests/runner-api.cfm"
          box testbox run --verbose outputFile=tests/results/test-results outputFormats=json,antjunit

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ContentBox Test Results - ${{ matrix.cfengine }}
          path: |
            tests/results/*

      - name: Notify Slack of Failures
        if: ${{ failure() }}
        uses: craftech-io/slack-action@v1
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: failure

      - name: Cat Failure Debugging Info
        if: ${{ failure() }}
        run: |
          cat .engines/acf2016/WEB-INF/cfusion/logs/hibernatesql.log
          cat .engines/acf2018/WEB-INF/cfusion/logs/hibernatesql.log
          box server log serverConfigFile="server-${{ matrix.cfengine }}.json"

      - name: Upload Debugging Info Artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Failure Debugging Info - ${{ matrix.cfengine }}
          path: |
            tests/results/*
            .engines/**/logs/*
            .engines/**/WEB-INF/cfusion/logs/*

  # Let's build up our software
  build:
    name: Build ContentBox
    needs: tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Setup CommandBox
        uses: elpete/setup-commandbox@v1.0.0

      - name: Install Build Dependencies
        run: |
          box install
          cd modules/contentbox && box install

      - name: Setup Environment Variables For Build Process
        id: current_version
        run: |
          echo "VERSION=`cat box.json | jq '.version' -r'`" >> $GITHUB_ENV
          # master or snapshot
          echo "BRANCH=master" >> $GITHUB_ENV
          if [[ "{{ GITHUB_REF }}" == "refs/heads/development" ]] ; then
            echo "BRANCH=development" >> $GITHUB_ENV
          fi
          echo "Building ContentBox for ${{ env.BRANCH }}"

      - name: Build Docs
        run: box run-script build:allDocs

      - name: Build ContentBox Versions
        run: |
          ant -Dcontentbox.version=${{ env.VERSION }} -Dbuild.number=${{ github.run_number }} -Dbuild.branch=${{ env.BRANCH }} -f build/build.xml
          cat build/build-contentbox/module/box.json

      - name: Upload Binaries to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: "downloads.ortussolutions.com"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
          SOURCE_DIR: "artifacts"
          DEST_DIR: "ortussolutions"

      - name: Upload API Docs to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: "apidocs.ortussolutions.com"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
          SOURCE_DIR: "build/build-contentbox/apidocs"
          DEST_DIR: "contentbox/${{ env.VERSION }}"

      - name: Publish to ForgeBox
        if: ${{ success() }}
        run: |
          chmod +x build/forgebox-publish-github.sh
          build/forgebox-publish-github.sh

      - name: Inform Slack of success
        if: ${{ success() }}
        uses: craftech-io/slack-action@v1
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Inform Slack of failure
        if: ${{ failure() }}
        uses: craftech-io/slack-action@v1
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: failure
